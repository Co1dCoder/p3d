// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PhiloGL.O3D.P3DModel = (function(_super) {

    __extends(P3DModel, _super);

    function P3DModel(opts, callback) {
      this.opts = opts != null ? opts : {};
      this.render = __bind(this.render, this);

      this._onP3DLoad = __bind(this._onP3DLoad, this);

      this.load = __bind(this.load, this);

      this.opts.render = this.render;
      PhiloGL.O3D.Model.call(this, this.opts);
      if (this.opts.src != null) {
        this.load(this.opts.src, callback);
      }
    }

    P3DModel.prototype.load = function(src, callback) {
      this.callback = callback;
      return new P3D(src, this.opts.p3d, this._onP3DLoad);
    };

    P3DModel.prototype._onP3DLoad = function(p3d) {
      var k, realDynamic, _i, _len, _ref;
      realDynamic = this.dynamic;
      this.dynamic = true;
      _ref = ["vertices", "normals"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        this[k] = p3d[k];
      }
      this.colors = new Float32Array(this.colors);
      this.dynamic = realDynamic;
      this._loadedP3D = true;
      return typeof this.callback === "function" ? this.callback(p3d, this) : void 0;
    };

    P3DModel.prototype.render = function(gl, program, camera) {
      var drawType;
      if (this._loadedP3D != null) {
        drawType = this.drawType != null ? gl.TRIANGLES : gl.get(this.drawType);
        return gl.drawArrays(drawType, 0, this.$verticesLength / 3);
      }
    };

    return P3DModel;

  })(PhiloGL.O3D.Model);

}).call(this);
